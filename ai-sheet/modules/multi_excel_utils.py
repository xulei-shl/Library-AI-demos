#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""  
Â§öExcelÂ§öSheetÂ§ÑÁêÜÂ∑•ÂÖ∑Ê®°Âùó
Êèê‰æõÂ§öExcelÊñá‰ª∂Ëß£Êûê„ÄÅÈ™åËØÅÂíåÈ¢ÑËßàÁîüÊàêÁ≠âÂäüËÉΩ
"""

import os
import pandas as pd
from typing import Dict, List, Any, Tuple, Optional
from modules.config_manager import MultiModelConfigManager
from modules.excel_utils import validate_excel_file, format_file_size


class MultiExcelManager:
    """Â§öExcelÂ§öSheetÁÆ°ÁêÜÂô®"""
    
    def __init__(self):
        self.config = self._get_excel_config()
        self.excel_files = {}  # {file_path: {sheets: [], data: {}}}
        
    def _get_excel_config(self):
        """Ëé∑ÂèñExcelÁõ∏ÂÖ≥ÈÖçÁΩÆ"""
        config_manager = MultiModelConfigManager()
        return config_manager.get_excel_config()
    
    def add_excel_file(self, file_path: str) -> Tuple[bool, str, List[str]]:
        """Ê∑ªÂä†ExcelÊñá‰ª∂Âπ∂Ëé∑ÂèñSheetÂàóË°®
        
        ÂèÇÊï∞:
            file_path: ExcelÊñá‰ª∂Ë∑ØÂæÑ
            
        ËøîÂõû:
            (ÊòØÂê¶ÊàêÂäü, ÈîôËØØ‰ø°ÊÅØ, SheetÂàóË°®)
        """
        # È™åËØÅÊñá‰ª∂
        is_valid, error_msg = validate_excel_file(file_path)
        if not is_valid:
            return False, error_msg, []
        
        try:
            # Ëé∑ÂèñÊâÄÊúâSheetÂêçÁß∞
            excel_file = pd.ExcelFile(file_path)
            sheet_names = excel_file.sheet_names
            
            # Â≠òÂÇ®Êñá‰ª∂‰ø°ÊÅØ
            self.excel_files[file_path] = {
                'sheets': sheet_names,
                'data': {},
                'file_info': {
                    'name': os.path.basename(file_path),
                    'size': os.path.getsize(file_path),
                    'total_sheets': len(sheet_names)
                }
            }
            
            return True, "", sheet_names
            
        except Exception as e:
            return False, f"ËØªÂèñExcelÊñá‰ª∂Â§±Ë¥•: {str(e)}", []
    
    def remove_excel_file(self, file_path: str) -> bool:
        """ÁßªÈô§ExcelÊñá‰ª∂"""
        if file_path in self.excel_files:
            del self.excel_files[file_path]
            return True
        return False
    
    def get_sheet_data(self, file_path: str, sheet_name: str) -> Dict[str, Any]:
        """Ëé∑ÂèñÊåáÂÆöSheetÁöÑÊï∞ÊçÆ
        
        ÂèÇÊï∞:
            file_path: ExcelÊñá‰ª∂Ë∑ØÂæÑ
            sheet_name: SheetÂêçÁß∞
            
        ËøîÂõû:
            SheetÊï∞ÊçÆÂ≠óÂÖ∏
        """
        if file_path not in self.excel_files:
            raise ValueError(f"ExcelÊñá‰ª∂Êú™Âä†ËΩΩ: {file_path}")
        
        # Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁºìÂ≠ò
        cache_key = f"{file_path}#{sheet_name}"
        if cache_key in self.excel_files[file_path]['data']:
            return self.excel_files[file_path]['data'][cache_key]
        
        try:
            # ËØªÂèñSheetÊï∞ÊçÆ
            df = pd.read_excel(file_path, sheet_name=sheet_name)
            
            # Ê£ÄÊü•Êï∞ÊçÆË°åÊï∞ÔºåË∂ÖÂá∫ÈôêÂà∂Êó∂Êà™Âèñ
            total_rows = len(df)
            max_rows = self.config['max_rows']
            if total_rows > max_rows:
                df = df.iloc[:max_rows]
                truncated = True
            else:
                truncated = False
            
            # ÁîüÊàêÂàóÂêçÂàóË°®
            columns = [f"{chr(65+i)}Âàó-{col}" for i, col in enumerate(df.columns)]
            
            # ÁîüÊàêÈ¢ÑËßàÊï∞ÊçÆ
            preview_rows = self.config['preview_rows']
            preview = self._generate_markdown_preview(df, preview_rows)
            
            sheet_data = {
                'data': df,
                'preview': preview,
                'total_rows': total_rows,
                'truncated': truncated,
                'columns': columns,
                'column_names': list(df.columns),
                'sheet_name': sheet_name
            }
            
            # ÁºìÂ≠òÊï∞ÊçÆ
            self.excel_files[file_path]['data'][cache_key] = sheet_data
            
            return sheet_data
            
        except Exception as e:
            raise Exception(f"ËØªÂèñSheetÊï∞ÊçÆÂ§±Ë¥•: {str(e)}")
    
    def _generate_markdown_preview(self, df: pd.DataFrame, rows: int = 5) -> str:
        """ÁîüÊàêMarkdownÊ†ºÂºèÁöÑÊï∞ÊçÆÈ¢ÑËßà"""
        if df.empty:
            return "*Êï∞ÊçÆ‰∏∫Á©∫*"
        
        # ÂèñÂâçNË°åÊï∞ÊçÆ
        preview_df = df.head(rows)
        
        # ÊûÑÂª∫MarkdownË°®Ê†º
        header = "| " + " | ".join(f"{chr(65+i)}-{col}" for i, col in enumerate(preview_df.columns)) + " |"
        separator = "| " + " | ".join(["-" * max(len(str(col)), 3) for col in preview_df.columns]) + " |"
        
        rows_md = []
        for _, row in preview_df.iterrows():
            # Â§ÑÁêÜÁâπÊÆäÂ≠óÁ¨¶ÂíåÁ©∫ÂÄº
            row_values = [str(val).replace("|", "\\|").replace("\n", " ") if pd.notna(val) else "" for val in row]
            rows_md.append("| " + " | ".join(row_values) + " |")
        
        return "\n".join([header, separator] + rows_md)
    
    def get_all_files(self) -> List[str]:
        """Ëé∑ÂèñÊâÄÊúâÂ∑≤Âä†ËΩΩÁöÑExcelÊñá‰ª∂Ë∑ØÂæÑ"""
        return list(self.excel_files.keys())
    
    def get_file_sheets(self, file_path: str) -> List[str]:
        """Ëé∑ÂèñÊåáÂÆöÊñá‰ª∂ÁöÑÊâÄÊúâSheetÂêçÁß∞"""
        if file_path in self.excel_files:
            return self.excel_files[file_path]['sheets']
        return []
    
    def get_file_info(self, file_path: str) -> Dict[str, Any]:
        """Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØ"""
        if file_path in self.excel_files:
            return self.excel_files[file_path]['file_info']
        return {}
    
    def clear_all(self):
        """Ê∏ÖÈô§ÊâÄÊúâÊï∞ÊçÆ"""
        self.excel_files.clear()
    
    def generate_combined_preview(self, selections: List[Tuple]) -> str:
        """ÁîüÊàêÂ§ö‰∏™Êñá‰ª∂-SheetÁªÑÂêàÁöÑÈ¢ÑËßà
        
        ÂèÇÊï∞:
            selections: [(file_path, sheet_name), ...] Êàñ [(file_path, sheet_name, selected_columns), ...] ÈÄâÊã©ÁöÑÊñá‰ª∂-SheetÁªÑÂêà
            
        ËøîÂõû:
            ÁªÑÂêàÈ¢ÑËßàÁöÑMarkdownÂ≠óÁ¨¶‰∏≤
        """
        if not selections:
            return "*ËØ∑ÈÄâÊã©Ë¶ÅÈ¢ÑËßàÁöÑExcelÊñá‰ª∂ÂíåSheet*"
        
        preview_parts = []
        
        for selection in selections:
            # ÂÖºÂÆπÊóßÊ†ºÂºèÂíåÊñ∞Ê†ºÂºè
            if len(selection) == 2:
                file_path, sheet_name = selection
                selected_columns = []
            elif len(selection) == 3:
                file_path, sheet_name, selected_columns = selection
            else:
                continue  # Ë∑≥ËøáÊó†ÊïàÁöÑÈÄâÊã©
            
            try:
                # Ëé∑ÂèñÊñá‰ª∂Âêç
                file_name = os.path.basename(file_path)
                
                # Ëé∑ÂèñSheetÊï∞ÊçÆ
                sheet_data = self.get_sheet_data(file_path, sheet_name)
                
                # Ê∑ªÂä†Ê†áÈ¢ò
                preview_parts.append(f"## üìä {file_name} - {sheet_name}")
                
                # Ê†πÊçÆÊòØÂê¶ÊúâÈÄâ‰∏≠ÂàóÊòæÁ§∫‰∏çÂêå‰ø°ÊÅØ
                if selected_columns:
                    preview_parts.append(f"**ÊÄªË°åÊï∞:** {sheet_data['total_rows']} | **Â∑≤ÈÄâÂàóÊï∞:** {len(selected_columns)} / {len(sheet_data['column_names'])}")
                    preview_parts.append(f"**ÈÄâ‰∏≠Âàó:** {', '.join(selected_columns)}")
                else:
                    preview_parts.append(f"**ÊÄªË°åÊï∞:** {sheet_data['total_rows']} | **ÂàóÊï∞:** {len(sheet_data['column_names'])}")
                    preview_parts.append("**ÈÄâ‰∏≠Âàó:** ÂÖ®ÈÉ®Âàó")
                
                preview_parts.append("")
                
                # ÁîüÊàêËøáÊª§ÂêéÁöÑÈ¢ÑËßà
                if selected_columns:
                    from modules.column_utils import generate_filtered_preview
                    filtered_preview = generate_filtered_preview(sheet_data, selected_columns, self.config['preview_rows'])
                    preview_parts.append(filtered_preview)
                else:
                    preview_parts.append(sheet_data['preview'])
                
                preview_parts.append("")
                
            except Exception as e:
                preview_parts.append(f"## ‚ùå {os.path.basename(file_path)} - {sheet_name}")
                preview_parts.append(f"*ËØªÂèñÂ§±Ë¥•: {str(e)}*")
                preview_parts.append("")
        
        return "\n".join(preview_parts)
    
    def export_selections_info(self, selections: List[Tuple]) -> Dict[str, Any]:
        """ÂØºÂá∫ÈÄâÊã©ÁöÑÊñá‰ª∂-Sheet‰ø°ÊÅØÔºå‰æõÂÖ∂‰ªñÊ®°Âùó‰ΩøÁî®
        
        ÂèÇÊï∞:
            selections: [(file_path, sheet_name, selected_columns), ...] ÈÄâÊã©ÁöÑÊñá‰ª∂-SheetÁªÑÂêà
            
        ËøîÂõû:
            ÂåÖÂê´ÊâÄÊúâÈÄâÊã©‰ø°ÊÅØÁöÑÂ≠óÂÖ∏
        """
        # ÊèêÂèñÊñá‰ª∂Ë∑ØÂæÑÁî®‰∫éÁªüËÆ°
        file_paths = []
        for selection in selections:
            if len(selection) >= 2:
                file_paths.append(selection[0])
        
        export_data = {
            'selections': [],
            'total_files': len(set(file_paths)),
            'total_sheets': len(selections),
            'combined_preview': self.generate_combined_preview(selections)
        }
        
        for selection in selections:
            # ÂÖºÂÆπÊóßÊ†ºÂºèÂíåÊñ∞Ê†ºÂºè
            if len(selection) == 2:
                file_path, sheet_name = selection
                selected_columns = []
            else:
                file_path, sheet_name, selected_columns = selection
            try:
                sheet_data = self.get_sheet_data(file_path, sheet_name)
                file_info = self.get_file_info(file_path)
                
                selection_info = {
                    'file_path': file_path,
                    'file_name': file_info.get('name', os.path.basename(file_path)),
                    'file_size': file_info.get('size', 0),
                    'sheet_name': sheet_name,
                    'total_rows': sheet_data['total_rows'],
                    'columns': sheet_data['columns'],
                    'column_names': sheet_data['column_names'],
                    'selected_columns': selected_columns,
                    'preview': sheet_data['preview'],
                    'truncated': sheet_data['truncated']
                }
                
                export_data['selections'].append(selection_info)
                
            except Exception as e:
                # Ê∑ªÂä†ÈîôËØØ‰ø°ÊÅØ
                error_info = {
                    'file_path': file_path,
                    'file_name': os.path.basename(file_path),
                    'sheet_name': sheet_name,
                    'error': str(e)
                }
                export_data['selections'].append(error_info)
        
        return export_data


def save_final_selections(manager: MultiExcelManager, selections: List[Tuple]) -> bool:
    """‰øùÂ≠òÊúÄÁªàÁ°ÆËÆ§ÁöÑÈÄâÊã©Ôºà‰ºòÂåñÁâàÔºåÂéªÈô§ÂÜó‰ΩôÔºâ
    
    ÂèÇÊï∞:
        manager: MultiExcelManagerÂÆû‰æã
        selections: ÈÄâÊã©ÁöÑÊñá‰ª∂-SheetÁªÑÂêàÂàóË°®ÔºàÊîØÊåÅÂàóÈÄâÊã©Ôºâ
        
    ËøîÂõû:
        ÊòØÂê¶‰øùÂ≠òÊàêÂäü
    """
    try:
        # Á°Æ‰øùlogsÁõÆÂΩïÂ≠òÂú®
        logs_dir = "logs"
        if not os.path.exists(logs_dir):
            os.makedirs(logs_dir)
        
        # Ê£ÄÊü•Âπ∂Ëá™Âä®Âä†ËΩΩÊú™Âä†ËΩΩÁöÑExcelÊñá‰ª∂
        loaded_files = manager.get_all_files()
        for selection in selections:
            # ÂÖºÂÆπÊóßÊ†ºÂºèÂíåÊñ∞Ê†ºÂºè
            if len(selection) >= 2:
                file_path = selection[0]
                if file_path not in loaded_files:
                    print(f"Ê£ÄÊµãÂà∞Êú™Âä†ËΩΩÁöÑÊñá‰ª∂ÔºåÊ≠£Âú®Âä†ËΩΩ: {file_path}")
                    success, error_msg, sheet_names = manager.add_excel_file(file_path)
                    if not success:
                        print(f"Ëá™Âä®Âä†ËΩΩÊñá‰ª∂Â§±Ë¥•: {file_path}, ÈîôËØØ: {error_msg}")
                        # ÁªßÁª≠Â§ÑÁêÜÂÖ∂‰ªñÊñá‰ª∂Ôºå‰∏ç‰∏≠Êñ≠Êï¥‰∏™ÊµÅÁ®ã
                    else:
                        print(f"Êñá‰ª∂Âä†ËΩΩÊàêÂäü: {file_path}, ÂåÖÂê´ {len(sheet_names)} ‰∏™Sheet")
        
        # ÂØºÂá∫ÈÄâÊã©‰ø°ÊÅØ
        export_data = manager.export_selections_info(selections)
        
        # ‰øùÂ≠òÁªÑÂêàÈ¢ÑËßàÂà∞MDÊñá‰ª∂ÔºàÂè™‰øùÂ≠òÈ¢ÑËßàÔºâ
        preview_file = os.path.join(logs_dir, "multi_excel_preview.md")
        with open(preview_file, 'w', encoding='utf-8') as f:
            f.write(export_data['combined_preview'])
        
        # ‰øùÂ≠ò‰ºòÂåñÂêéÁöÑJSONÊñá‰ª∂ÔºàÂéªÈô§È¢ÑËßàÂÜó‰ΩôÔºâ
        import json
        from datetime import datetime
        
        info_file = os.path.join(logs_dir, "multi_excel_selections.json")
        with open(info_file, 'w', encoding='utf-8') as f:
            # ÊûÑÂª∫‰ºòÂåñÂêéÁöÑÊï∞ÊçÆÁªìÊûÑ
            optimized_data = {
                'metadata': {
                    'saved_at': datetime.now().isoformat(),
                    'total_files': export_data['total_files'],
                    'total_sheets': export_data['total_sheets'],
                    'is_final': True
                },
                'selections': []
            }
            
            # Âè™‰øùÂ≠òÁªìÊûÑÂåñÊï∞ÊçÆÔºåÁßªÈô§È¢ÑËßàÂÜó‰Ωô
            for selection in export_data['selections']:
                if 'error' not in selection:  # Âè™‰øùÂ≠òÊàêÂäüÁöÑÈÄâÊã©
                    clean_selection = {
                        'file_path': selection['file_path'],
                        'file_name': selection['file_name'],
                        'file_size': selection.get('file_size', 0),
                        'sheet_name': selection['sheet_name'],
                        'total_rows': selection['total_rows'],
                        'columns': selection['columns'],
                        'column_names': selection['column_names'],
                        'selected_columns': selection.get('selected_columns', []),
                        'truncated': selection['truncated']
                    }
                    optimized_data['selections'].append(clean_selection)
                else:
                    # ‰øùÂ≠òÈîôËØØ‰ø°ÊÅØ‰ΩÜ‰∏çÂåÖÂê´È¢ÑËßà
                    error_selection = {
                        'file_path': selection['file_path'],
                        'file_name': selection['file_name'],
                        'sheet_name': selection['sheet_name'],
                        'error': selection['error']
                    }
                    optimized_data['selections'].append(error_selection)
            
            json.dump(optimized_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ ÊúÄÁªàÈÄâÊã©Â∑≤‰øùÂ≠òÂà∞: {preview_file}, {info_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå ‰øùÂ≠òÊúÄÁªàÈÄâÊã©Â§±Ë¥•Ôºö{e}")
        return False


def save_multi_excel_data_to_temp(manager: MultiExcelManager, selections: List[Tuple]) -> bool:
    """Â∞ÜÂ§öExcelÊï∞ÊçÆ‰øùÂ≠òÂà∞‰∏¥Êó∂Êñá‰ª∂ÔºàÂÖºÂÆπÊÄß‰øùÁïôÔºâ
    
    ÂèÇÊï∞:
        manager: MultiExcelManagerÂÆû‰æã
        selections: ÈÄâÊã©ÁöÑÊñá‰ª∂-SheetÁªÑÂêàÂàóË°®ÔºàÊîØÊåÅÂàóÈÄâÊã©Ôºâ
        
    ËøîÂõû:
        ÊòØÂê¶‰øùÂ≠òÊàêÂäü
    """
    # Ë∞ÉÁî®Êñ∞ÁöÑ‰ºòÂåñÁâàÊú¨
    return save_final_selections(manager, selections)


def load_multi_excel_data_from_temp() -> Optional[Dict[str, Any]]:
    """‰ªé‰∏¥Êó∂Êñá‰ª∂Âä†ËΩΩÂ§öExcelÊï∞ÊçÆ
    
    ËøîÂõû:
        Âä†ËΩΩÁöÑÊï∞ÊçÆÂ≠óÂÖ∏ÔºåÂ§±Ë¥•Êó∂ËøîÂõûNone
    """
    try:
        import json
        info_file = os.path.join("logs", "multi_excel_selections.json")
        
        if not os.path.exists(info_file):
            return None
        
        with open(info_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # Âä†ËΩΩÈ¢ÑËßàÂÜÖÂÆπ
        preview_file = os.path.join("logs", "multi_excel_preview.md")
        if os.path.exists(preview_file):
            with open(preview_file, 'r', encoding='utf-8') as f:
                data['combined_preview'] = f.read()
        
        return data
        
    except Exception as e:
        print(f"‰ªé‰∏¥Êó∂Êñá‰ª∂Âä†ËΩΩÂ§öExcelÊï∞ÊçÆÂ§±Ë¥•Ôºö{e}")
        return None


def check_save_status(current_selections: List[Tuple]) -> Dict[str, Any]:
    """Ê£ÄÊü•ÂΩìÂâçÈÄâÊã©ÁöÑ‰øùÂ≠òÁä∂ÊÄÅ
    
    ÂèÇÊï∞:
        current_selections: ÂΩìÂâçÈÄâÊã©ÁöÑÊñá‰ª∂-SheetÁªÑÂêàÂàóË°®ÔºàÊîØÊåÅÂàóÈÄâÊã©Ôºâ
        
    ËøîÂõû:
        ‰øùÂ≠òÁä∂ÊÄÅ‰ø°ÊÅØÂ≠óÂÖ∏
    """
    try:
        import json
        from datetime import datetime
        
        info_file = os.path.join("logs", "multi_excel_selections.json")
        
        # Â¶ÇÊûúÊ≤°Êúâ‰øùÂ≠òÊñá‰ª∂ÔºåËøîÂõûÊú™‰øùÂ≠òÁä∂ÊÄÅ
        if not os.path.exists(info_file):
            return {
                'is_saved': False,
                'has_changes': len(current_selections) > 0,
                'saved_count': 0,
                'current_count': len(current_selections),
                'last_saved': None,
                'status_message': 'Â∞öÊú™‰øùÂ≠ò‰ªª‰ΩïÈÄâÊã©'
            }
        
        # ËØªÂèñÂ∑≤‰øùÂ≠òÁöÑÈÄâÊã©
        with open(info_file, 'r', encoding='utf-8') as f:
            saved_data = json.load(f)
        
        # ÊèêÂèñÂ∑≤‰øùÂ≠òÁöÑÈÄâÊã©ÔºàÂè™ÊØîËæÉÊàêÂäüÁöÑÈÄâÊã©Ôºâ
        saved_selections = []
        for selection in saved_data.get('selections', []):
            if 'error' not in selection:
                selected_columns = selection.get('selected_columns', [])
                saved_selections.append((selection['file_path'], selection['sheet_name'], tuple(selected_columns)))
        
        # Ê†áÂáÜÂåñÂΩìÂâçÈÄâÊã©Ê†ºÂºè
        normalized_current = []
        for selection in current_selections:
            if len(selection) == 2:
                file_path, sheet_name = selection
                normalized_current.append((file_path, sheet_name, tuple()))
            else:
                file_path, sheet_name, selected_columns = selection
                normalized_current.append((file_path, sheet_name, tuple(selected_columns)))
        
        # ÊØîËæÉÂΩìÂâçÈÄâÊã©‰∏éÂ∑≤‰øùÂ≠òÈÄâÊã©
        current_set = set(normalized_current)
        saved_set = set(saved_selections)
        has_changes = current_set != saved_set
        
        return {
            'is_saved': not has_changes and len(current_selections) > 0,
            'has_changes': has_changes,
            'saved_count': len(saved_selections),
            'current_count': len(current_selections),
            'last_saved': saved_data.get('metadata', {}).get('saved_at'),
            'status_message': _get_status_message(has_changes, len(current_selections), len(saved_selections))
        }
        
    except Exception as e:
        return {
            'is_saved': False,
            'has_changes': True,
            'saved_count': 0,
            'current_count': len(current_selections),
            'last_saved': None,
            'status_message': f'Ê£ÄÊü•Áä∂ÊÄÅÂ§±Ë¥•: {str(e)}'
        }


def _get_status_message(has_changes: bool, current_count: int, saved_count: int) -> str:
    """ÁîüÊàêÁä∂ÊÄÅÊèêÁ§∫Ê∂àÊÅØ"""
    if current_count == 0:
        return 'ËØ∑ÈÄâÊã©ExcelÊñá‰ª∂ÂíåSheet'
    elif not has_changes and current_count > 0:
        return f'‚úÖ Â∑≤‰øùÂ≠ò {saved_count} ‰∏™ÈÄâÊã©'
    elif has_changes:
        if saved_count == 0:
            return f'‚ö†Ô∏è ËØ∑ÁÇπÂáª"‰øùÂ≠ò"ÊåâÈíÆÁ°ÆËÆ§ {current_count} ‰∏™ÈÄâÊã©'
        else:
            return f'‚ö†Ô∏è ÈÄâÊã©Â∑≤ÂèòÊõ¥ÔºåËØ∑ÈáçÊñ∞‰øùÂ≠òÔºàÂΩìÂâç {current_count} ‰∏™ÔºåÂ∑≤‰øùÂ≠ò {saved_count} ‰∏™Ôºâ'
    else:
        return 'Áä∂ÊÄÅÊú™Áü•'


def get_unsaved_selections_count(current_selections: List[Tuple]) -> int:
    """Ëé∑ÂèñÊú™‰øùÂ≠òÁöÑÈÄâÊã©Êï∞Èáè
    
    ÂèÇÊï∞:
        current_selections: ÂΩìÂâçÈÄâÊã©ÁöÑÊñá‰ª∂-SheetÁªÑÂêàÂàóË°®ÔºàÊîØÊåÅÂàóÈÄâÊã©Ôºâ
        
    ËøîÂõû:
        Êú™‰øùÂ≠òÁöÑÈÄâÊã©Êï∞Èáè
    """
    status = check_save_status(current_selections)
    if status['has_changes']:
        return status['current_count']
    return 0


def get_save_status_info(current_selections: List[Tuple]) -> Dict[str, Any]:
    """Ëé∑Âèñ‰øùÂ≠òÁä∂ÊÄÅ‰ø°ÊÅØÔºàÁî®‰∫éUIÊòæÁ§∫Ôºâ
    
    ÂèÇÊï∞:
        current_selections: ÂΩìÂâçÈÄâÊã©ÁöÑÊñá‰ª∂-SheetÁªÑÂêàÂàóË°®ÔºàÊîØÊåÅÂàóÈÄâÊã©Ôºâ
        
    ËøîÂõû:
        UIÊòæÁ§∫Áî®ÁöÑÁä∂ÊÄÅ‰ø°ÊÅØ
    """
    status = check_save_status(current_selections)
    
    # Ê†πÊçÆÁä∂ÊÄÅÁîüÊàêUI‰ø°ÊÅØ
    if status['is_saved']:
        ui_info = {
            'show_reminder': False,
            'reminder_type': 'success',
            'reminder_title': '‚úÖ Â∑≤‰øùÂ≠òÊúÄÁªàÈÄâÊã©',
            'reminder_message': f"‰øùÂ≠òÊó∂Èó¥: {_format_datetime(status['last_saved'])}üìä ÂèØÁî®‰∫éÂÖ¨ÂºèÁîüÊàêÂíåÊèêÁ§∫ËØçÁîüÊàê",
            'button_text': 'ÈáçÊñ∞‰øùÂ≠ò',
            'button_style': 'secondary'
        }
    elif status['has_changes'] and status['current_count'] > 0:
        ui_info = {
            'show_reminder': True,
            'reminder_type': 'warning',
            'reminder_title': '‚ö†Ô∏è ËØ∑ÁÇπÂáª"‰øùÂ≠ò"ÊåâÈíÆÁ°ÆËÆ§ÈÄâÊã©',
            'reminder_message': f"ÂΩìÂâçÂ∑≤ÈÄâÊã©: {status['current_count']}‰∏™Êñá‰ª∂ÂíåSheetÈúÄË¶Å‰øùÂ≠òÂêéÊâçËÉΩÁî®‰∫éÂêéÁª≠Êìç‰Ωú",
            'button_text': 'üìã ‰øùÂ≠òÈÄâÊã©',
            'button_style': 'primary'
        }
    else:
        ui_info = {
            'show_reminder': False,
            'reminder_type': 'info',
            'reminder_title': 'ËØ∑ÈÄâÊã©ExcelÊñá‰ª∂ÂíåSheet',
            'reminder_message': '‰∏ä‰º†ExcelÊñá‰ª∂Âπ∂ÈÄâÊã©ÈúÄË¶ÅÁöÑSheet',
            'button_text': '‰øùÂ≠òÈÄâÊã©',
            'button_style': 'disabled'
        }
    
    # Ê∑ªÂä†ÂéüÂßãÁä∂ÊÄÅ‰ø°ÊÅØ
    ui_info.update(status)
    
    return ui_info


def _format_datetime(datetime_str: str) -> str:
    """Ê†ºÂºèÂåñÊó•ÊúüÊó∂Èó¥Â≠óÁ¨¶‰∏≤"""
    if not datetime_str:
        return 'Êú™Áü•'
    
    try:
        from datetime import datetime
        dt = datetime.fromisoformat(datetime_str.replace('Z', '+00:00'))
        return dt.strftime('%Y-%m-%d %H:%M')
    except:
        return datetime_str


def clear_multi_excel_temp_files():
    """Ê∏ÖÈô§Â§öExcel‰∏¥Êó∂Êñá‰ª∂"""
    try:
        temp_files = [
            os.path.join("logs", "multi_excel_preview.md"),
            os.path.join("logs", "multi_excel_selections.json")
        ]
        
        for temp_file in temp_files:
            if os.path.exists(temp_file):
                os.remove(temp_file)
                print(f"‰∏¥Êó∂Êñá‰ª∂Â∑≤Âà†Èô§: {temp_file}")
                
    except Exception as e:
        print(f"Ê∏ÖÈô§Â§öExcel‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•Ôºö{e}")